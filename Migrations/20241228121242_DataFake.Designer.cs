// <auto-generated />
using System;
using ApiCursoEntityFrameworkCore.ApplicationDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace ApiCursoEntityFrameworkCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241228121242_DataFake")]
    partial class DataFake
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biografy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("ActorTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1996, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tom Holland"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1948, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samuel L. Jackson"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1965, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Robert Downey Jr."
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1981, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chris Evans"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1972, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dwayne Johnson"
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(2000, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auli'i Cravalho"
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scarlet Johansson"
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Keanu Reeves"
                        });
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GenreId")
                        .HasColumnType("integer");

                    b.Property<bool>("InMovie")
                        .HasColumnType("boolean");

                    b.Property<string>("Poster")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("PremiereDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("FilmTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InMovie = false,
                            Poster = "https://static.posters.cz/image/750/posters/avengers-one-sheet-i12720.jpg",
                            PremiereDate = new DateTime(2012, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Avengers"
                        },
                        new
                        {
                            Id = 2,
                            InMovie = false,
                            Poster = "https://static.posters.cz/image/750/posters/coco-family-i56183.jpg",
                            PremiereDate = new DateTime(2017, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Coco"
                        },
                        new
                        {
                            Id = 3,
                            InMovie = false,
                            Poster = "https://img.ecartelera.com/noticias/70100/70190-c.jpg",
                            PremiereDate = new DateTime(2021, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spider-Man: No way home"
                        },
                        new
                        {
                            Id = 4,
                            InMovie = false,
                            Poster = "https://m.media-amazon.com/images/I/91B64g3nQfL.jpg",
                            PremiereDate = new DateTime(2019, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spider-Man: far from home"
                        },
                        new
                        {
                            Id = 5,
                            InMovie = true,
                            Poster = "https://www.dodmagazine.es/wp-content/uploads/2021/11/the-matrix-resurrection-poster-new.jpg",
                            PremiereDate = new DateTime(2100, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Matrix Resurrections"
                        });
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.FilmsActors", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<string>("Character")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("FilmId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("FilmsActorsTable");

                    b.HasData(
                        new
                        {
                            FilmId = 4,
                            ActorId = 2,
                            Character = "Samuel L. Jackson",
                            Order = 2
                        },
                        new
                        {
                            FilmId = 4,
                            ActorId = 1,
                            Character = "Peter Parker",
                            Order = 1
                        },
                        new
                        {
                            FilmId = 3,
                            ActorId = 1,
                            Character = "Peter Parker",
                            Order = 1
                        },
                        new
                        {
                            FilmId = 1,
                            ActorId = 7,
                            Character = "Black Widow",
                            Order = 3
                        },
                        new
                        {
                            FilmId = 1,
                            ActorId = 3,
                            Character = "Iron Man",
                            Order = 2
                        },
                        new
                        {
                            FilmId = 1,
                            ActorId = 4,
                            Character = "Capitán América",
                            Order = 1
                        },
                        new
                        {
                            FilmId = 5,
                            ActorId = 8,
                            Character = "Neo",
                            Order = 1
                        });
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.FilmsGenres", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("FilmId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("FilmsGenreTable");

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 1,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            FilmId = 3,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 3,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 3,
                            GenreId = 3
                        },
                        new
                        {
                            FilmId = 4,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 4,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 4,
                            GenreId = 3
                        },
                        new
                        {
                            FilmId = 5,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 5,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 5,
                            GenreId = 5
                        });
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.FilmsMovieTheaters", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieTheaterId")
                        .HasColumnType("integer");

                    b.HasKey("FilmId", "MovieTheaterId");

                    b.HasIndex("MovieTheaterId");

                    b.ToTable("FilmsMovieTheaterTable");

                    b.HasData(
                        new
                        {
                            FilmId = 5,
                            MovieTheaterId = 3
                        },
                        new
                        {
                            FilmId = 5,
                            MovieTheaterId = 4
                        },
                        new
                        {
                            FilmId = 5,
                            MovieTheaterId = 1
                        },
                        new
                        {
                            FilmId = 5,
                            MovieTheaterId = 2
                        },
                        new
                        {
                            FilmId = 5,
                            MovieTheaterId = 5
                        },
                        new
                        {
                            FilmId = 5,
                            MovieTheaterId = 6
                        },
                        new
                        {
                            FilmId = 5,
                            MovieTheaterId = 7
                        });
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("GenreTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<NpgsqlPoint>("Location")
                        .HasColumnType("point");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("MovieTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = new NpgsqlTypes.NpgsqlPoint(18.482988400331013, -69.939744635201478),
                            Name = "Agora Mall"
                        },
                        new
                        {
                            Id = 2,
                            Location = new NpgsqlTypes.NpgsqlPoint(18.482296323201627, -69.911554052933141),
                            Name = "Sambil"
                        },
                        new
                        {
                            Id = 3,
                            Location = new NpgsqlTypes.NpgsqlPoint(18.506294943828209, -69.856479387357979),
                            Name = "Megacentro"
                        },
                        new
                        {
                            Id = 4,
                            Location = new NpgsqlTypes.NpgsqlPoint(18.469753004268405, -69.938915513982195),
                            Name = "Acropolis"
                        });
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.MovieTheater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)");

                    b.Property<int>("TypeMovieTheater")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieTheaterTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            Price = 2.2m,
                            TypeMovieTheater = 1
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 1,
                            Price = 3.2m,
                            TypeMovieTheater = 2
                        },
                        new
                        {
                            Id = 3,
                            MovieId = 2,
                            Price = 2m,
                            TypeMovieTheater = 1
                        },
                        new
                        {
                            Id = 4,
                            MovieId = 2,
                            Price = 3m,
                            TypeMovieTheater = 2
                        },
                        new
                        {
                            Id = 5,
                            MovieId = 3,
                            Price = 3m,
                            TypeMovieTheater = 1
                        },
                        new
                        {
                            Id = 6,
                            MovieId = 3,
                            Price = 3.5m,
                            TypeMovieTheater = 2
                        },
                        new
                        {
                            Id = 7,
                            MovieId = 3,
                            Price = 4.5m,
                            TypeMovieTheater = 3
                        },
                        new
                        {
                            Id = 8,
                            MovieId = 4,
                            Price = 2.5m,
                            TypeMovieTheater = 1
                        });
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.OfferMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PercentageDiscount")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("OfferMovieTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2025, 12, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            MovieId = 1,
                            PercentageDiscount = 10m,
                            StartDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2025, 12, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            MovieId = 4,
                            PercentageDiscount = 15m,
                            StartDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PeopleTable");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.Film", b =>
                {
                    b.HasOne("ApiCursoEntityFrameworkCore.Entities.Genre", null)
                        .WithMany("Films")
                        .HasForeignKey("GenreId");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.FilmsActors", b =>
                {
                    b.HasOne("ApiCursoEntityFrameworkCore.Entities.Actor", "Actor")
                        .WithMany("FilmsActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiCursoEntityFrameworkCore.Entities.Film", "Film")
                        .WithMany("FilmsActors")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.FilmsGenres", b =>
                {
                    b.HasOne("ApiCursoEntityFrameworkCore.Entities.Film", "Film")
                        .WithMany("FilmsGenres")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiCursoEntityFrameworkCore.Entities.Genre", "Genre")
                        .WithMany("FilmsGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.FilmsMovieTheaters", b =>
                {
                    b.HasOne("ApiCursoEntityFrameworkCore.Entities.Film", "Film")
                        .WithMany("FilmsMovieTheaters")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiCursoEntityFrameworkCore.Entities.MovieTheater", "MovieTheater")
                        .WithMany("FilmsMovieTheaters")
                        .HasForeignKey("MovieTheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("MovieTheater");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.MovieTheater", b =>
                {
                    b.HasOne("ApiCursoEntityFrameworkCore.Entities.Movie", "Movie")
                        .WithMany("MovieTheaters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.OfferMovie", b =>
                {
                    b.HasOne("ApiCursoEntityFrameworkCore.Entities.Movie", null)
                        .WithOne("OfferMovie")
                        .HasForeignKey("ApiCursoEntityFrameworkCore.Entities.OfferMovie", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.Actor", b =>
                {
                    b.Navigation("FilmsActors");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.Film", b =>
                {
                    b.Navigation("FilmsActors");

                    b.Navigation("FilmsGenres");

                    b.Navigation("FilmsMovieTheaters");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.Genre", b =>
                {
                    b.Navigation("Films");

                    b.Navigation("FilmsGenres");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.Movie", b =>
                {
                    b.Navigation("MovieTheaters");

                    b.Navigation("OfferMovie");
                });

            modelBuilder.Entity("ApiCursoEntityFrameworkCore.Entities.MovieTheater", b =>
                {
                    b.Navigation("FilmsMovieTheaters");
                });
#pragma warning restore 612, 618
        }
    }
}
